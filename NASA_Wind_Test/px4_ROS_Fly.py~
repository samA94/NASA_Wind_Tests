import rospy
from geometry_msgs.msg import Twist, PoseWithCovariance
from mavros_msgs.srv import CommandBool, SetMode, StreamRate
import time
import sys

rospy.init_node("send_Waypoints")

rospy.wait_for_service("mavros/set_stream_rate")
setRate = rospy.ServiceProxy("mavros/set_stream_rate", StreamRate)

setRate(0, 50, 1)
rospy.Rate(50.0)

global read_Position

def quad_Command(mode, armVar = False):
    #initialize topics for arming quad
    rospy.wait_for_service("mavros/cmd/arming")
    armQuad = rospy.ServiceProxy("mavros/cmd/arming", CommandBool)
    rospy.wait_for_service("mavros/set_mode")
    modeSet = rospy.ServiceProxy("mavros/set_mode", SetMode) 

    #arm quadrotor and initialize proper mode

    armQuad(armVar)
    print "System Arm Status: ", armVar
    time.sleep(3)

    modeSet(mode[0], mode[1])
    print "Mode set to: ", mode


def position_callback(GPS_Position_From_Quad):
    #function to get the position of the quad
    global read_Position
    read_Position = GPS_Position_From_Quad


def has_Reached_Position(final_Target_Position):
    #function to check if the quad has reached the target position
    global read_Position

    lat = read_Position.latitude
    lon = read_Position.longitude
    alt = read_Position.altitude

    distance_to_Lat = lat - final_Target_Position[0]
    distance_to_Lon = lon - final_Target_Position[1]
    distance_to_alt = alt - final_Target_Position[2]

    if distance_to_alt < 0.0001 and distance_to_Lat < 0.0001 and distance_to_Lon < 0.0001:
        return True
    else:
        return False


def main():
    global read_Position

    final_Target_Position = input("Please enter the final desired location, in degrees, in the form
        [latitude, longitude, altitude] in GPS coordinates, to 5 decimal places")

    mode_List = [0, "OFFBOARD"]
    quad_Command(mode_List, True)

    rospy.Subscriber("/mavros/global_position/global", PoseWithCovariance,
        read_Position)

    pub_Position = rospy.Publisher("/mavros/setpoint_raw/local",
            PositionTarget, queue_size = 10)
    
    while True:
        #Update the position of the quad and check to see if it has
        #reached the target position.  Break if it has reach target position

        if read_Position.lat - next_Target_Position.latitude < 0.0001:
            next_Target_Position.latitude = read_Position.latitude + 0.00001
        
        if read_Position.lon - next_Target_Position.longitude < 0.0001:
            next_Target_Position.longitude = read_Position.longitude + 0.00001

        if read_Position.altitude - next_Target_Position.altitude < 0.0001:
            next_Target_Position.altitude = read_Position.altitude + 0.00001


        if has_Reached_Position(final_Target_Position) == True:
            #Check to see if final position has been reached
            break

        else:
            pub_Position(next_Target_Position)









